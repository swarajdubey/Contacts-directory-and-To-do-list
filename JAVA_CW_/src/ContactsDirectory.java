
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author swaraj
 */
public class ContactsDirectory extends javax.swing.JFrame {

    /**
     * Creates new form ContactsDirectory
     */
    
    //SQLiteDatabaseConnection mmn= new EditPhoneContact();
    //EditPhoneContact epc = new EditPhoneContact();
    
    
    //define objects of all the child classes
    EditPhoneContact epc= new EditPhoneContact();
    EditEmailContact eec = new EditEmailContact();
    EditNameContact enc = new EditNameContact();
    DeleteContact dc = new DeleteContact();
    SearchByName sbn = new SearchByName();
    DuplicatePhoneNumber dp = new DuplicatePhoneNumber();
    DirectoryDuplicateEmail dde = new DirectoryDuplicateEmail();
    RetrieveContacts rc = new RetrieveContacts();
    SortNames sn = new SortNames();
    ContactsUpdate cu = new ContactsUpdate();
    
    SQLiteDatabaseConnection sql;
    
    
    
    private String username; //stores the username
    
    private String name_of_task,contact_number,email_contact; //stores the task name , contact number and email 
    SQLiteDatabaseConnection sq2;
    
    private ArrayList<ArrayList<String>> sortedContacts = new ArrayList<ArrayList<String>>(); //arraylist to store contacts that are sorted alphabetically
    private ArrayList<ArrayList<String>> originalContacts = new ArrayList<ArrayList<String>>(); //arraylist that stores contacts in their original format(just like in the database)
    private ArrayList<ArrayList<String>> searchContacts = new ArrayList<ArrayList<String>>(); //arraylist that stores contacts that have been searched by name
    
    DefaultTableModel tableModel; //model for table
    DefaultListModel dlm = new DefaultListModel(); 
    
    private String uniqueEmail="";
    
    public ContactsDirectory() {
        initComponents();
        String col[] = {"Name","Contact Number","Email"}; //define columns of the table
        tableModel = new DefaultTableModel(col, 0); //make the table by inserting the columns
        jTable2.setModel(tableModel); //finally set the model to officialy make a legit table
        
    }
    
    private void UpdateTable()
    {
        tableModel.setRowCount(0);
        sql=rc;
        sql.setparentObject(sq2);
        originalContacts=sql.getContacts(username); //get original contacts
          //add rows to the table
          for(int i=0;i<originalContacts.size();i++)
          {
              Vector v= new Vector(); //we need a new vector for a new row, clearing the vector creates an exception
              for(int j=0;j<originalContacts.get(i).size();j++)
              {
                    v.add(originalContacts.get(i).get(j)); //get contacts data and insert into a vector
                    if(j==originalContacts.get(i).size()-1) //add emails to the jlist
                    {
                        dlm.addElement(originalContacts.get(i).get(j));
                    }
              }
              tableModel.addRow(v); //add rows by pushing the vector in here
          }
    }
    
    public void getClassObject(ContactsDirectory cd,String email, SQLiteDatabaseConnection sq)
    {
          cd.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); //set close operation on this window that closes this window on clicking red cross without closing other windows
          username=email; //get and set the username of the person
          sq2=sq;//to prevent using the keyword 'new' for sqlite database connection whicih reset the database again
          UpdateTable(); //show the table as soon as the user opens the manager   
          
          
    }  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("View your directory using the following options");

        jButton2.setText("View Directory in original form");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                View_DirectoryActionPerformed(evt);
            }
        });

        jButton3.setText("Sort by name");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sort_namesActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jLabel7.setText("Search by name:");

        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Searchname_KeyReleased(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Add new Contact"));

        jLabel8.setText("Add Name:");

        jLabel9.setText("Contact number:");

        jLabel10.setText("email contact:");

        jButton4.setText("Save Contact");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveContacts_ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(91, 91, 91))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Contact"));

        jButton5.setText("Delete Contact");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_contact_ActionPerformed(evt);
            }
        });

        jButton6.setText("Edit Name");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_name_ActionPerformed(evt);
            }
        });

        jButton7.setText("Edit email contact");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_email_ActionPerformed(evt);
            }
        });

        jButton8.setText("Edit Phone Contact");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_phone_contact_ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jLabel2.setText("All names are in lowercases. ");

        jLabel11.setText("Select a row first before editing.");

        jLabel3.setText("Phone number must be 10 digits.");

        jLabel4.setText("General rules");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jButton2)
                                .addGap(43, 43, 43)
                                .addComponent(jButton3)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jLabel7)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(24, 24, 24))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        jTabbedPane1.addTab("View Directory", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //clicking this button shows the original directory(not sorted)
    private void View_DirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_View_DirectoryActionPerformed
        // TODO add your handling code here:
        UpdateTable();   //shows the directory in its original form 
    }//GEN-LAST:event_View_DirectoryActionPerformed

    //clicking this button sorts the data alphabetically and returns the contacts here
    private void Sort_namesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sort_namesActionPerformed
        // TODO add your handling code here:
        sql=sn; //polymorphism , point to the child class
        sql.setparentObject(sq2); //set the sql object so that child classes can perform operation on database
        
        sortedContacts=sql.sortContactsByNames(username); //sorted contacts are returned here
        tableModel.setRowCount(0); //clear the table to prevent repetetive data being added
        for(int i=0;i<sortedContacts.size();i++)
        {
            Vector v= new Vector(); //we need a new vector for a new row, clearing the vector creates an exception
            for(int j=0;j<sortedContacts.get(i).size();j++)
            {
                  v.add(sortedContacts.get(i).get(j));
            }
            tableModel.addRow(v); //add rows to the table
        }
    }//GEN-LAST:event_Sort_namesActionPerformed

    //entering text in this field does real time search of the contacts and displaying as well
    private void Searchname_KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Searchname_KeyReleased
        // TODO add your handling code here:
        
        String temp=jTextField4.getText(); //get the text the user has typed so far
        if(temp.length()>0) //atleast one character has been typed
        {
            //start searching for contacts starting with the characters the person just typed
         
            sql=sbn; //point to child class
            sql.setparentObject(sq2);//set the sql object so that child classes can perform operation on database
            
            //System.out.println("setting row count to 0 \n");
            searchContacts=sql.SearchContactByName(username,temp); //function that gets contacts of the person whose name starts with the characters the user just typed
            tableModel.setRowCount(0); //clear the table to prevent repetetive data being added
            for(int i=0;i<searchContacts.size();i++)
            {
                Vector v= new Vector(); //we need a new vector for a new row, clearing the vector creates an exception
                for(int j=0;j<searchContacts.get(i).size();j++)
                {
                      v.add(searchContacts.get(i).get(j));
                }
                tableModel.addRow(v); //add rows to the table
            }
        }
        else //if nothing is present in the text field then show the contacts in their original format(not sorted)
        {
            //show the original contacts directory
            UpdateTable();
        }
    }//GEN-LAST:event_Searchname_KeyReleased

    //function that detects if a row has been selected in the table
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        
        //row count starts from zero
        int rowSelected=jTable2.getSelectedRow(); //get row of the selected table row
        uniqueEmail=(String) (jTable2.getModel().getValueAt(rowSelected, 2)); //get the email of the person as it is a unique identifier
        System.out.println("email is: "+uniqueEmail+"\n");
    }//GEN-LAST:event_jTable2MouseClicked

    //function to delete the contact
    private void Delete_contact_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_contact_ActionPerformed
        // TODO add your handling code here:
        
        //delete the contact of the email selected
        if(uniqueEmail.length()>0) //if the row has been selected
        {
            int p=JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the following email contact:"+uniqueEmail+"?","Delete Contact",JOptionPane.YES_NO_OPTION);
            if(p==0) //received confirmation from the user now(can delete the contact now)
            {
                sql=dc; //point to child class
                sql.setparentObject(sq2); //set the sql object so that child classes can perform operation on database
                sql.deleteSelectedContact(uniqueEmail,username);
                
                UpdateTable(); //update the table with changes 
                correctUser("Contact deleted.");//inform the user
                uniqueEmail="";
                return;
            }
            else
            {
                UpdateTable();//to de-select the row
                uniqueEmail="";
            }
        }
        else
        {
            correctUser("Please select a row before performing any operations."); //inform the user
            UpdateTable();//to de-select the row
            return;
        }
    }//GEN-LAST:event_Delete_contact_ActionPerformed

    //function that changes the name of the contact we wish to edit
    private void Edit_name_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_name_ActionPerformed
        // TODO add your handling code here:
        if(uniqueEmail.length()>0) //if the row has been selected
        {
            //prompt an input dialogue to the user to enter a new name for the person
            String response=JOptionPane.showInputDialog("Enter a new name");
            if(response!=null && response.length()>0) //if a string has been entered and the button clicked is 'ok'
            {
                sql=enc; //point to child class
                sql.setparentObject(sq2);//set the sql object so that child classes can perform operation on database
                
                //update the name here
                response=response.toLowerCase();
                sql.editNameOfContact(username,uniqueEmail,response); 
                UpdateTable();   //update the table with contacts
                correctUser("Contact name edited."); //inform the user
                uniqueEmail=""; //reset variable to null
                return;
            }
            else
            {
                UpdateTable();//to de-select the row
                uniqueEmail="";
            }
        }
        else
        {
            correctUser("Please select a row before performing any operations.");//inform the user
            UpdateTable();//to de-select the row
            return;
        }
    }//GEN-LAST:event_Edit_name_ActionPerformed

    //function to edit the email
    private void Edit_email_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_email_ActionPerformed
        // TODO add your handling code here:
        if(uniqueEmail.length()>0) //if a row has been selected
        {
            String response=JOptionPane.showInputDialog("Enter a new email contact");
            if(response!=null && response.length()>0)//if a string has been entered and the button clicked is 'ok'
            {
                if(response.contains(" ")) //email cannot have white spaces
                {
                    correctUser("Invalid email");
                    UpdateTable();//to de-select the row
                    uniqueEmail="";
                    return;
                }
                
                sql=dde;
                sql.setparentObject(sq2);
                
                //check if email already exists
                if(sql.checkdirectoryDuplicateEmail(response, username)==true)
                {
                    sql=eec; //point to child class
                    sql.setparentObject(sq2); //set the sql object so that child classes can perform operation on database
                    
                    sql.editEmailOfContact(username,uniqueEmail,response); //edit the email contact
                    UpdateTable();//update the table based on changes made 
                    correctUser("Edited email."); //inform the user
                    uniqueEmail="";
                    return;
                }
                else
                {
                    //duplicate emails exists hence correct the user
                    correctUser("The email: "+response+" already exists.");
                    UpdateTable();//to de-select the row
                    uniqueEmail="";
                    return;
                    
                }
                
            }
            else
            {
                UpdateTable();//to de-select the row
                uniqueEmail="";
            }
        }
        else
        {
            correctUser("Please select a row before performing any operations."); //inform the user
            UpdateTable();//to de-select the row
            return;
        }
    }//GEN-LAST:event_Edit_email_ActionPerformed

    private void Edit_phone_contact_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_phone_contact_ActionPerformed
        // TODO add your handling code here:
        
        
        if(uniqueEmail.length()>0) //if a row has been selected
        {
            String response=JOptionPane.showInputDialog("Enter a new phone contact for this person");
            if(response!=null && response.length()>0) //if a string has been entered and the button clicked is 'ok'
            {
                if(response.length()==10) //phone number should be 10 digits in length
                {
                    //regex entry 
                    if(response.matches(".*\\D+.*")==true) //invalid phone number(non digit found)
                    {
                        //show a dialogue box to correct the user
                        correctUser("Invalid phone number.");
                        UpdateTable();//to de-select the row
                        uniqueEmail="";
                        return; 
                    }
                }
                else
                {
                    //show a dialogue box to correct the user
                    correctUser("Phone number must be 10 digits in length");
                    UpdateTable();//to de-select the row
                    uniqueEmail="";
                    return;
                }
                
                sql= dp; //point to child class
                sql.setparentObject(sq2); //set the sql object so that child classes can perform operation on database
                
                //check for duplicate phone contact
                if(sql.checkDuplicatePhoneNumber(username, response)==true)
                {
                    sql= epc; //point to child class
                    sql.setparentObject(sq2);//set the sql object so that child classes can perform operation on database
                    
                    sql.editPhoneOfContact(username, uniqueEmail, response); //edit the phone contact
                
                    UpdateTable(); //make changes to the table based on the changes 
                    correctUser("Contact number edited.");//inform the user
                    uniqueEmail="";
                    return;
                }
                else
                {
                    correctUser("The number: "+response+" already exists.");
                    UpdateTable();//to de-select the row
                    uniqueEmail="";
                    return;
                }
                
            }
            else
            {
                UpdateTable();//to de-select the row
                uniqueEmail="";
            }
        }
        else
        {
            correctUser("Please select a row before performing any operations."); //inform the user
            UpdateTable();//to de-select the row
            return;
        }
    }//GEN-LAST:event_Edit_phone_contact_ActionPerformed

    //function to save the contacts
    private void SaveContacts_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveContacts_ActionPerformed
        // TODO add your handling code here:
        name_of_task=jTextField5.getText(); //get the name of the contact
        name_of_task=name_of_task.toLowerCase(); //convert the name to lowercase
        contact_number=jTextField6.getText(); //get the contact number entered in the field
        email_contact=jTextField7.getText(); //get the email entered in the field
        
        
        sql=dde; //point to child class
        sql.setparentObject(sq2); //set the sql object so that child classes can perform operation on database
        
        //check for duplicate email
        if(sql.checkdirectoryDuplicateEmail(email_contact,username)==true) //only if duplicate email is not found
        {
            //check if all the fields have data written into it
            if(name_of_task.length()>0 && contact_number.length()>0 && email_contact.length()>0) //ensure no null values
            {
                
                if(contact_number.contains(" ") || email_contact.contains(" ")) //email and phonenumber cannot have spaces
                {
                    //show a dialogue box to correct the user
                    correctUser("No spaces allowed in email and phone number field.");
                    return;
                }
                
                //check if the phone number has only numbers and is a 10 digit number
                if(contact_number.length()==10)
                {
                    //regex
                    if(contact_number.matches(".*\\D+.*")==true) //invalid phone number(non digit found)
                    {
                        //show a dialogue box to correct the user
                        correctUser("Invalid phone number.");
                        
                        return;
                    }
                }
                else if(contact_number.length()!=10) //if the phone number entered is not 10 digits in length
                {
                    //show a dialogue box to correct the user
                    correctUser("Phone number must be 10 digits in length.");
                    return;
                }
                
                //check for duplicate phone contact
                
                sql=dp; //point to child class
                sql.setparentObject(sq2);//set the sql object so that child classes can perform operation on database
                
                if(sql.checkDuplicatePhoneNumber(username,contact_number)==true)
                {
                    sql=cu; //point to child class
                    sql.setparentObject(sq2); //set the sql object so that child classes can perform operation on database
                    //update the contacts database here
                    System.out.println("attempting to save contacts with: "+username+" "+name_of_task+" "+contact_number+" "+email_contact);
                    sql.updateContacts(username,name_of_task,contact_number,email_contact); //insert the user's contacts into the database and save it

                    //update the table as soon as new contact is saved
                    UpdateTable();

                    //a general dialogue box to inform the user that their contacts have been saved
                    correctUser("Saved your contacts.");
                    contact_number="";
                    name_of_task="";
                    email_contact="";
                    return;
                }
                else
                {
                    //inform the user that the number entered already exists
                    correctUser("The phone number "+contact_number+" already exists.");
                    UpdateTable();
                    return;
                }
                
                
            }
            else //if any of the field does not contain data
            {
                //tell the user to fill up all the fields
                correctUser("Please fill up all the fields.");
                return;
            }
        }
        else
        {
            //show a dialogue box saying the email contact is already present
            correctUser("This email already exists in your contacts");
            return;
        }
    }//GEN-LAST:event_SaveContacts_ActionPerformed

    
    //function to display a dialogue box with any message passed into this function
    private void correctUser(String messageToDisplay)
    {
        JOptionPane pane = new JOptionPane();
        pane.setMessage(messageToDisplay); //message to be displayed in the JOptionPane
        JDialog d = pane.createDialog(null, "");
        d.setVisible(true);
        return;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactsDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactsDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactsDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactsDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContactsDirectory().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}
